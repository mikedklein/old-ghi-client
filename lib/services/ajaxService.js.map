{"version":3,"sources":["../../src/services/ajaxService.js"],"names":["AjaxInterface","callBack","method","url","data","options","AjaxAxios","cb","interceptors","request","use","config","Promise","reject","error","response","payload","statusText","statusCode","status","resolve","then","catch","errorPayload","responseText","message","AjaxJquery","ajaxPrefilter","originalOptions","jqXHR","document","ajaxSuccess","event","xhr","xhrFields","withCredentials","contentType","JSON","stringify","ajax","Axe","Jq"],"mappings":"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","file":"ajaxService.js","sourcesContent":["import axios from 'axios';\nimport $ from 'jquery';\n\n// TODO review my JSDoc Syntax and make sure this is right.\nclass AjaxInterface {\n  /**\n   * The 'requestCallback' used to configure the request interceptor.\n   *\n   * @callback requestCallback\n   * @param\n   * @param\n   */\n  /**\n   * Stub for Ajax interface request interceptor\n   * @param {requestCallback} cb - The callback that handles the request interceptor configuration.\n   */\n  reqIntercept(callBack) {\n  }\n  /**\n     * The 'responseCallback' used to configure the response interceptor.\n     *\n     * @callback requestCallback\n     * @param\n     * @param\n     */\n  /**\n     * Stub for Ajax interface request interceptor\n     * @param {responseCallback} cb - The callback that handles the response interceptor configuration.\n     * @returns {Promise}\n     */\n  resIntercept(callBack) {\n  }\n\n// TODO check to make sure this is working with intellisense\n  /**\n * The request options object\n * @typedef {Object} requestOptions\n * @property {boolean} withCredentials - indicates whether to use credentials on the reuquest or not.\n * @property {object} headers - what headers to include\n * @property {boolean} nocsrf - falg used as helper in the response interceptor to see if credentials can be extracted.\n */\n\n  /**\n   * Stub for Ajax interface `request`\n   * @param {string} method - the type of request being made e.g. put, post, get etc.\n   * @param {string} url - the url the request is to be made against\n   * @param {object} data - the payload if any to be sent with the request (optional)\n   * @param {object} {...requestOptions} - {@link requestOptions}\n   * @returns {promise} - a (jquery/axios) promise for the request\n   */\n  request(method, url, data, options) {\n    /*\n     * Promise success object\n     * {\n     *   data: the payload data,\n     *   textStatus: the text status i.e. 'success'\n     *   statusCode: the status code from the request i.e. 200\n     * }\n     * Promise error object\n     * {\n     *   responseText: error text returned from the server,\n     *   textStatus: the text status i.e. 'error'\n     *   statusCode: the status code from the request i.e. 404\n     * }\n     */\n  }\n}\n\nclass AjaxAxios extends AjaxInterface {\n  reqIntercept(cb) {\n    axios.interceptors.request.use(\n      config => {\n        return cb(config);\n      },\n      error => {\n        return Promise.reject(error);\n      },\n    );\n  }\n\n  resIntercept(cb) {\n    axios.interceptors.response.use(\n      response => {\n        let payload = {\n          data: response.data,\n          statusText: response.statusText || 'success',\n          statusCode: response.status,\n        };\n        // TODO check for way around this response\n        cb(payload);\n        return response;\n      },\n      error => {\n        return Promise.reject(error);\n      },\n    );\n  }\n\n  request(method, url, data = {}, options = {}) {\n    const config = { method, url, data, ...options };\n\n    return new Promise((resolve, reject) => {\n      axios(config)\n        .then(data => {\n          let payload = {\n            data: data.data,\n            statusText: data.statusText || 'success',\n            statusCode: data.status,\n          };\n          resolve(payload);\n        })\n        .catch(error => {\n          let errorPayload = {};\n          if (error.response) {\n            // The request was made, but the server responded with a status code\n            // that falls out of the range of 2xx\n            errorPayload = {\n              statusCode: error.response.status,\n              statusText: 'error',\n              responseText: error.response.data,\n            };\n          } else {\n            // Something happened in setting up the request that triggered an Error\n            errorPayload = { statusCode: null, statusText: 'error', responseText: error.message };\n          }\n          reject(errorPayload);\n        });\n    });\n  }\n}\n\nclass AjaxJquery extends AjaxInterface {\n  reqIntercept(cb) {\n    $.ajaxPrefilter((options, originalOptions, jqXHR) => cb(options, originalOptions, jqXHR));\n  }\n\n  resIntercept(cb) {\n    $(document).ajaxSuccess((event, xhr, options, data) => {\n      let payload = { data, statusText: xhr.statusText, statusCode: xhr.status };\n      return cb(payload);\n    });\n  }\n\n  request(method, url, data = {}, options = {}) {\n    // TODO options should always be immutable and just ignore options that aren't relevant\n    let xhrFields = {};\n\n    if (options.withCredentials) {\n      delete options.withCredentials;\n      xhrFields.withCredentials = true;\n    }\n\n    const config = {\n      method,\n      url,\n      contentType: 'application/json',\n      data: JSON.stringify(data),\n      ...options,\n      xhrFields,\n    };\n\n    return new Promise((resolve, reject) => {\n      $\n        .ajax(config)\n        .then((data, statusText, jqXHR) => {\n          let payload = { data, statusText, statusCode: jqXHR.status };\n          resolve(payload);\n        })\n        .catch(error => {\n          let errorPayload = {\n            statusCode: error.status,\n            statusText: error.statusText,\n            responseText: error.responseText,\n          };\n          reject(errorPayload);\n        });\n    });\n  }\n}\n\n// const Ajax = new AjaxAxios();\n// const Ajax = new AjaxJquery();\n// REMOVE THIS\nexport const Axe = new AjaxAxios();\nexport const Jq = new AjaxJquery();\n"]}